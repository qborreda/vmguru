/**
 * Assortment of different helper functions
 * Heavy use of the _prefixer.scss mixin
 */

@mixin rotate($param) {
    @include prefixer( transform, rotate($param), webkit moz ms o spec );
}

// @mixin transform($param) {
//     @include prefixer(transform, $param, webkit moz spec);
// }

@mixin transition($param) {
    @include prefixer(transition, #{$param}, webkit moz ms o spec );
}

@mixin perspective($param) {
    @include prefixer(perspective, $param, webkit moz spec);
}

@mixin perspective-origin($param) {
    @include prefixer(perspective-origin, $param, webkit moz spec);
}

@mixin backface-visibility($param) {
    @include prefixer(backface-visibility, $param, webkit moz spec);
}

@mixin box-sizing($box) {
    @include prefixer(box-sizing, $box, webkit moz spec);
}

@mixin background-clip($clip) {
    @include prefixer(background-clip, $clip, webkit moz spec);
}

@mixin border-radius($radius) {
    @include prefixer(border-radius, #{$radius}, webkit moz spec);
}

@mixin box-shadow($param) {
    @include prefixer(box-shadow, #{$param}, webkit moz spec);
}

@mixin inner-shadow($param) {
  @imclude prefixer(box-shadow, #{$param}, webkit moz spec);
}

@mixin text-shadow($param) {
    @include prefixer(text-shadow, #{$param}, webkit moz spec);
}

@mixin background-gradient($from, $to, $fallback: false, $angle: top) {
    $fallback-color: $from;

    @if (type-of($fallback) == color) or ($fallback == "transparent") {
        $fallback-color: $fallback;
    }

    background: $fallback-color;
    background: -webkit-gradient($angle, 0 0, 0 100%, color-stop(0, $from), color-stop(1, $to));
    background: -webkit-linear-gradient($angle, $from, $to);
    background:    -moz-linear-gradient($angle, $from, $to);
    background:     -ms-linear-gradient($angle, $from, $to);
    background:      -o-linear-gradient($angle, $from, $to);
    background:         linear-gradient($angle, $from, $to);
}

@mixin vertical-gradient($start: #000000, $stop: #FFFFFF) {
    background-color: $start;
    background-image: -webkit-gradient(linear, left top, left bottom, from($start), to($stop));
    background-image: -moz-linear-gradient(center top, $start 0%, $stop 100%);
    background-image: -moz-gradient(center top, $start 0%, $stop 100%);
    background-image: linear-gradient(to bottom, $start 0%, $stop 100%);
}

@mixin opacity($value) {
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$value*100})";
  filter: alpha(opacity=#{$value*100});
  -moz-opacity: $value;
  opacity: $value;
}

@mixin placeholder {
  &.placeholder { @content; }
  &:-moz-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &::-webkit-input-placeholder { @content; }
  &::-ms-input-placeholder { @content; }
  &:-ms-input-placeholder { @content; }
}

@mixin unselectable() {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: moz-none;
  -ms-user-select: none;
  user-select: none;
}
